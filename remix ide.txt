BANK SOL :

pragma solidity ^0.8.18;

contract Bank {

    mapping(address => uint256) public balanceOf;   // balances, indexed by addresses

    function deposit(uint256 amount) public payable {
        require(msg.value == amount);

        balanceOf[msg.sender] += amount;     // adjust the account's balance
    }

MYCONTRACT :

// Solidity program to 
// retrieve address and 
// balance of owner 
pragma solidity ^0.8.18;	 

// Creating a contract 
contract MyContract 
{ 
	// Private state variable 
	address private owner; 

	// Defining a constructor 
	constructor() public{ 
		owner=msg.sender; 
	} 

	// Function to get 
	// address of owner 
	function getOwner( 
	) public view returns (address) {	 
		return owner; 
	} 

	// Function to return 
	// current balance of owner 
	function getBalance( 
	) public view returns(uint256){ 
		return owner.balance; 
	} 
} 
---------------------------------------------------------
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.18;


contract MyBank
{
    mapping(address=> uint ) private _balances;
    address public owner;
    event LogDepositeMade(address accountHoder, uint amount );

    constructor () 
     {
         owner=msg.sender;
         emit LogDepositeMade(msg.sender, 1000);
     }

        function deposite() public payable  returns (uint)
        {

        require ((_balances[msg.sender] + msg.value) >  _balances[msg.sender] && msg.sender!=address(0));
        _balances[msg.sender] += msg.value;
        emit LogDepositeMade(msg.sender , msg.value);
        return _balances[msg.sender];
        } 

        function withdraw (uint withdrawAmount) public  returns (uint)
        {

                require (_balances[msg.sender] >= withdrawAmount);
                require(msg.sender!=address(0));
                require (_balances[msg.sender] > 0);
                _balances[msg.sender]-= withdrawAmount;
                address payable recipient = payable(msg.sender);
                recipient.transfer(withdrawAmount);
                emit LogDepositeMade(msg.sender , withdrawAmount);
                return _balances[msg.sender];

        }

        function viewBalance() public view returns (uint)
        {
            return _balances[msg.sender];
        }
   
}
----------------------------------------------------------------------------------------------
https://mumbaifaucet.com/

https://www.datawallet.com/crypto/add-polygon-mumbai-to-metamask

https://remix.ethereum.org/#lang=en&optimize=false&runs=200&evmVersion=null&version=soljson-v0.8.18+commit.87f61d96.js